import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface SecurityScan {
  overallRisk: 'critical' | 'high' | 'medium' | 'low' | 'safe';
  riskScore: number;
  vulnerabilities: Array<{
    id: string;
    severity: 'critical' | 'high' | 'medium' | 'low';
    category: 'dependency' | 'code' | 'configuration' | 'authentication' | 'data-exposure';
    title: string;
    description: string;
    affectedCode?: string;
    remediation: string;
    cve?: string;
  }>;
  dependencyScan: {
    totalDependencies: number;
    vulnerableDependencies: number;
    outdatedDependencies: number;
    recommendations: string[];
  };
  codeScan: {
    sqlInjectionRisk: boolean;
    xssRisk: boolean;
    csrfRisk: boolean;
    hardcodedSecrets: string[];
    insecureApis: string[];
  };
  complianceChecks: {
    gdpr: boolean;
    owasp: boolean;
    pci: boolean;
  };
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      code = '', 
      dependencies = [],
      language = 'javascript',
      framework = 'react'
    } = await req.json();

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
    );

    const { data: { user } } = await supabaseClient.auth.getUser(
      req.headers.get('Authorization')?.replace('Bearer ', '') ?? ''
    );

    const scanPrompt = `You are a cybersecurity expert specializing in application security, OWASP Top 10, and dependency vulnerabilities.

Perform a comprehensive security scan of this ${language} ${framework} project:

**Code:**
\`\`\`${language}
${code.substring(0, 5000)}
\`\`\`

**Dependencies:**
${dependencies.join('\n')}

Scan for:
1. **Dependency vulnerabilities**: Known CVEs, outdated packages
2. **Code vulnerabilities**: SQL injection, XSS, CSRF, authentication issues
3. **Hardcoded secrets**: API keys, passwords, tokens
4. **Insecure APIs**: Deprecated or insecure methods
5. **OWASP Top 10 compliance**
6. **Data exposure risks**
7. **Configuration issues**

Return ONLY valid JSON:
{
  "overallRisk": "critical|high|medium|low|safe",
  "riskScore": 0-100,
  "vulnerabilities": [
    {
      "id": "unique-id",
      "severity": "critical|high|medium|low",
      "category": "dependency|code|configuration|authentication|data-exposure",
      "title": "Vulnerability name",
      "description": "Detailed description",
      "affectedCode": "code snippet if applicable",
      "remediation": "How to fix it",
      "cve": "CVE-2024-XXXX if applicable"
    }
  ],
  "dependencyScan": {
    "totalDependencies": ${dependencies.length},
    "vulnerableDependencies": 0,
    "outdatedDependencies": 0,
    "recommendations": ["Update package X to version Y"]
  },
  "codeScan": {
    "sqlInjectionRisk": false,
    "xssRisk": false,
    "csrfRisk": false,
    "hardcodedSecrets": [],
    "insecureApis": []
  },
  "complianceChecks": {
    "gdpr": true,
    "owasp": true,
    "pci": true
  }
}`;

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [{
          role: "user",
          content: scanPrompt
        }],
        temperature: 0.2,
        max_tokens: 6000,
      }),
    });

    if (!response.ok) {
      throw new Error(`AI API error: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
    let scan: SecurityScan;

    if (jsonMatch) {
      scan = JSON.parse(jsonMatch[0]);
    } else {
      throw new Error('Failed to parse security scan from AI response');
    }

    // Log to database
    if (user) {
      await supabaseClient.from('security_scans').insert({
        user_id: user.id,
        language,
        framework,
        code_length: code.length,
        dependencies_count: dependencies.length,
        overall_risk: scan.overallRisk,
        risk_score: scan.riskScore,
        vulnerabilities_count: scan.vulnerabilities.length,
      });
    }

    return new Response(JSON.stringify(scan), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error: any) {
    console.error('Security scanner error:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
