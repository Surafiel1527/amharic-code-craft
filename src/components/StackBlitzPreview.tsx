import { useEffect, useRef, useState } from 'react';
import sdk from '@stackblitz/sdk';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Loader2, ExternalLink } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface StackBlitzPreviewProps {
  files: Array<{
    path: string;
    content: string;
    type: string;
  }>;
  projectName: string;
}

export function StackBlitzPreview({ files, projectName }: StackBlitzPreviewProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [projectUrl, setProjectUrl] = useState<string | null>(null);

  useEffect(() => {
    if (!containerRef.current || files.length === 0) return;

    const embedProject = async () => {
      try {
        setLoading(true);
        setError(null);

        // Convert files array to StackBlitz format
        const stackBlitzFiles: Record<string, string> = {};
        
        files.forEach(file => {
          // Remove leading slash if present
          const path = file.path.startsWith('/') ? file.path.slice(1) : file.path;
          stackBlitzFiles[path] = file.content;
        });

        // Add package.json if not present
        if (!stackBlitzFiles['package.json']) {
          stackBlitzFiles['package.json'] = JSON.stringify({
            name: projectName.toLowerCase().replace(/\s+/g, '-'),
            version: '0.0.0',
            private: true,
            type: 'module',
            scripts: {
              dev: 'vite',
              build: 'tsc && vite build',
              preview: 'vite preview'
            },
            dependencies: {
              react: '^18.3.1',
              'react-dom': '^18.3.1'
            },
            devDependencies: {
              '@types/react': '^18.3.1',
              '@types/react-dom': '^18.3.1',
              '@vitejs/plugin-react': '^4.3.1',
              typescript: '^5.6.3',
              vite: '^6.0.3'
            }
          }, null, 2);
        }

        // Add vite.config.ts if not present
        if (!stackBlitzFiles['vite.config.ts']) {
          stackBlitzFiles['vite.config.ts'] = `import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
})`;
        }

        // Add tsconfig.json if not present
        if (!stackBlitzFiles['tsconfig.json']) {
          stackBlitzFiles['tsconfig.json'] = JSON.stringify({
            compilerOptions: {
              target: 'ES2020',
              useDefineForClassFields: true,
              lib: ['ES2020', 'DOM', 'DOM.Iterable'],
              module: 'ESNext',
              skipLibCheck: true,
              moduleResolution: 'bundler',
              allowImportingTsExtensions: true,
              resolveJsonModule: true,
              isolatedModules: true,
              noEmit: true,
              jsx: 'react-jsx',
              strict: true,
              noUnusedLocals: true,
              noUnusedParameters: true,
              noFallthroughCasesInSwitch: true
            },
            include: ['src']
          }, null, 2);
        }

        // Add index.html if not present
        if (!stackBlitzFiles['index.html']) {
          stackBlitzFiles['index.html'] = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${projectName}</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>`;
        }

        // Embed the project
        const vm = await sdk.embedProject(
          containerRef.current,
          {
            title: projectName,
            description: `Generated by AI - ${new Date().toLocaleDateString()}`,
            template: 'node',
            files: stackBlitzFiles,
            settings: {
              compile: {
                trigger: 'auto',
                action: 'hmr',
                clearConsole: false
              }
            }
          },
          {
            openFile: 'src/App.tsx',
            view: 'preview',
            height: 600,
            hideNavigation: false,
            forceEmbedLayout: true
          }
        );

        // Get the project URL
        const url = await vm.getFsSnapshot();
        setProjectUrl(`https://stackblitz.com/edit/${projectName.toLowerCase().replace(/\s+/g, '-')}`);
        
        setLoading(false);
      } catch (err) {
        console.error('StackBlitz embed error:', err);
        setError(err instanceof Error ? err.message : 'Failed to load preview');
        setLoading(false);
      }
    };

    embedProject();
  }, [files, projectName]);

  if (error) {
    return (
      <Card className="p-6">
        <div className="text-center space-y-4">
          <Badge variant="destructive">Preview Error</Badge>
          <p className="text-sm text-muted-foreground">{error}</p>
          <p className="text-xs text-muted-foreground">
            The project files are still saved. You can view them in the file list above.
          </p>
        </div>
      </Card>
    );
  }

  return (
    <Card className="overflow-hidden">
      <div className="bg-muted/50 px-4 py-2 border-b flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="bg-background">
            Live Preview with Real npm Install
          </Badge>
          {loading && (
            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              <Loader2 className="h-3 w-3 animate-spin" />
              Installing packages...
            </div>
          )}
        </div>
        {projectUrl && (
          <Button
            variant="ghost"
            size="sm"
            asChild
          >
            <a href={projectUrl} target="_blank" rel="noopener noreferrer">
              <ExternalLink className="h-4 w-4 mr-2" />
              Open in StackBlitz
            </a>
          </Button>
        )}
      </div>
      <div 
        ref={containerRef} 
        className="w-full"
        style={{ minHeight: '600px' }}
      />
    </Card>
  );
}
