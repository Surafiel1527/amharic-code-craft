import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { 
  MessageSquare, 
  Code2, 
  Eye, 
  History, 
  Play,
  RotateCcw,
  Sparkles,
  Save,
  Copy
} from "lucide-react";
import { ChatInterface } from "./ChatInterface";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { useLanguage } from "@/contexts/LanguageContext";

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  generated_code?: string;
  created_at: string;
}

interface UserWorkspaceProps {
  projectId: string;
  conversationId: string;
  initialCode: string;
  onCodeUpdate: (code: string) => void;
  autoGeneratePrompt?: string | null;
}

export const UserWorkspace = ({ 
  projectId, 
  conversationId, 
  initialCode,
  onCodeUpdate,
  autoGeneratePrompt
}: UserWorkspaceProps) => {
  const { t } = useLanguage();
  const [activeTab, setActiveTab] = useState<string>("chat");
  const [workingCode, setWorkingCode] = useState(initialCode);
  const [messages, setMessages] = useState<Message[]>([]);
  const [versionHistory, setVersionHistory] = useState<any[]>([]);
  const [loadingHistory, setLoadingHistory] = useState(false);
  
  // Check localStorage to see if this project has already auto-generated
  const autoGenKey = `auto-gen-${projectId}`;
  const [hasAutoGenerated, setHasAutoGenerated] = useState(() => {
    return localStorage.getItem(autoGenKey) === 'true';
  });

  // Sync workingCode with initialCode when it changes (after DB updates)
  useEffect(() => {
    console.log('üìù UserWorkspace: initialCode changed, length:', initialCode?.length || 0);
    const placeholder = "<!-- Initializing workspace... -->";
    
    // Only update if initialCode has real content (not placeholder or empty)
    // AND if workingCode is still the placeholder or empty
    if (initialCode && initialCode !== placeholder && initialCode.trim().length > 0) {
      const currentIsPlaceholder = !workingCode || workingCode === placeholder || workingCode.trim().length === 0;
      
      if (currentIsPlaceholder || initialCode.length > workingCode.length) {
        setWorkingCode(initialCode);
        console.log('‚úÖ UserWorkspace: workingCode updated from initialCode');
      } else {
        console.log('‚è≠Ô∏è UserWorkspace: Skipping update - workingCode already has content');
      }
    }
  }, [initialCode]);

  // Load conversation messages and version history
  useEffect(() => {
    loadConversationHistory();
    loadVersionHistory();
  }, [conversationId]);

  const loadConversationHistory = async () => {
    try {
      const { data, error } = await supabase
        .from("messages")
        .select("*")
        .eq("conversation_id", conversationId)
        .order("created_at", { ascending: true });

      if (error) throw error;
      
      const typedMessages: Message[] = (data || []).map(m => ({
        id: m.id,
        role: m.role as 'user' | 'assistant',
        content: m.content,
        generated_code: m.generated_code || undefined,
        created_at: m.created_at
      }));
      
      setMessages(typedMessages);
    } catch (error) {
      console.error("Error loading conversation:", error);
    }
  };

  const loadVersionHistory = async () => {
    setLoadingHistory(true);
    try {
      const { data, error } = await supabase
        .from("project_versions")
        .select("*")
        .eq("project_id", projectId)
        .order("created_at", { ascending: false });

      if (error) throw error;
      setVersionHistory(data || []);
    } catch (error) {
      console.error("Error loading version history:", error);
    } finally {
      setLoadingHistory(false);
    }
  };

  const handleCodeGenerated = (code: string, shouldSaveVersion: boolean = true) => {
    console.log('üé® UserWorkspace: handleCodeGenerated CALLED');
    console.log('   - code length:', code?.length || 0);
    console.log('   - shouldSaveVersion:', shouldSaveVersion);
    console.log('   - code preview:', code?.substring(0, 100) || 'No code received');
    
    // Validate code before proceeding
    if (!code || code.trim().length === 0) {
      console.error('‚ùå UserWorkspace: No valid code received');
      toast.error('Failed to generate code. Please try again.');
      return;
    }
    
    // Check if this is just the placeholder
    const placeholder = "<!-- Initializing workspace... -->";
    if (code === placeholder) {
      console.warn('‚ö†Ô∏è UserWorkspace: Received placeholder code, skipping update');
      return;
    }
    
    setWorkingCode(code);
    onCodeUpdate(code);
    
    // Only create a version snapshot if this is a new generation (not initial load)
    if (shouldSaveVersion && code !== initialCode) {
      console.log('üíæ UserWorkspace: Saving version...');
      saveVersion(code);
    }
    console.log('‚úÖ UserWorkspace: workingCode updated to generated code');
  };

  const saveVersion = async (code: string) => {
    try {
      // Get the current version count
      const { data: versions } = await supabase
        .from("project_versions")
        .select("version_number")
        .eq("project_id", projectId)
        .order("version_number", { ascending: false })
        .limit(1);

      const nextVersion = (versions && versions[0]?.version_number || 0) + 1;

      await supabase.from("project_versions").insert({
        project_id: projectId,
        version_number: nextVersion,
        html_code: code,
        changes_summary: `${t("version.update")} ${nextVersion}`
      });

      loadVersionHistory();
    } catch (error) {
      console.error("Error saving version:", error);
    }
  };

  const handleRestoreVersion = async (version: any) => {
    try {
      setWorkingCode(version.html_code);
      onCodeUpdate(version.html_code);
      
      // Update conversation code
      await supabase
        .from("conversations")
        .update({ current_code: version.html_code })
        .eq("id", conversationId);

      toast.success(`Restored to version ${version.version_number}`);
    } catch (error) {
      console.error("Error restoring version:", error);
      toast.error("Failed to restore version");
    }
  };

  return (
    <div className="flex flex-col h-full bg-background">
      {/* Top Section: Generate Mode with Smart Context */}
      <div className="border-b bg-card/50">
        <div className="px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
              <Sparkles className="h-5 w-5 text-primary" />
            </div>
            <div>
              <h2 className="font-semibold text-base">AI Code Generator</h2>
              <p className="text-xs text-muted-foreground">Smart orchestration with multi-phase generation</p>
            </div>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => {
              // Save project
              toast.success("Project saved");
            }}
          >
            <Save className="w-4 h-4 mr-2" />
            Save
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <TabsList className="w-full justify-start border-b rounded-none h-11 px-4 bg-muted/30">
          <TabsTrigger value="chat" className="gap-2 data-[state=active]:bg-background">
            <MessageSquare className="w-4 h-4" />
            Chat
          </TabsTrigger>
          <TabsTrigger value="code" className="gap-2 data-[state=active]:bg-background">
            <Code2 className="w-4 h-4" />
            Code
          </TabsTrigger>
          <TabsTrigger value="preview" className="gap-2 data-[state=active]:bg-background">
            <Eye className="w-4 h-4" />
            Preview
          </TabsTrigger>
          <TabsTrigger value="history" className="gap-2 data-[state=active]:bg-background">
            <History className="w-4 h-4" />
            History
            {versionHistory.length > 0 && (
              <Badge variant="secondary" className="ml-1 text-xs px-1.5 py-0">
                {versionHistory.length}
              </Badge>
            )}
          </TabsTrigger>
        </TabsList>

        {/* Chat Tab with Smart Orchestration */}
        <TabsContent value="chat" className="flex-1 m-0 p-0 h-[calc(100vh-240px)]">
          <ChatInterface
            conversationId={conversationId}
            onCodeGenerated={handleCodeGenerated}
            currentCode={workingCode}
            onConversationChange={() => {}}
            autoSendPrompt={autoGeneratePrompt && !hasAutoGenerated ? autoGeneratePrompt : undefined}
            onAutoSendComplete={() => {
              setHasAutoGenerated(true);
              localStorage.setItem(autoGenKey, 'true');
            }}
          />
        </TabsContent>

        {/* Code Tab */}
        <TabsContent value="code" className="flex-1 m-0 h-[calc(100vh-240px)]">
          <ScrollArea className="h-full">
            <div className="p-4 space-y-4">
              <div className="flex items-center justify-between">
              <div className="space-y-1">
                <h3 className="text-base font-semibold">Project Code</h3>
                {workingCode && workingCode !== "<!-- Initializing workspace... -->" ? (
                  <div className="flex items-center gap-3 text-xs text-muted-foreground">
                    <span>{(workingCode.length / 1000).toFixed(1)}KB</span>
                    <span>‚Ä¢</span>
                    <span>{workingCode.split('\n').length} lines</span>
                  </div>
                ) : (
                  <p className="text-xs text-muted-foreground">
                    No code generated yet
                  </p>
                )}
              </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    navigator.clipboard.writeText(workingCode);
                    toast.success("Code copied to clipboard");
                  }}
                >
                  <Copy className="w-4 h-4 mr-2" />
                  Copy Code
                </Button>
              </div>
              {workingCode && workingCode !== "<!-- Initializing workspace... -->" ? (
                <Card className="border bg-card">
                  <div className="p-4 bg-muted/30 border-b">
                    <p className="text-xs text-muted-foreground">Full source code</p>
                  </div>
                  <ScrollArea className="h-[60vh]">
                    <pre className="p-4 text-xs font-mono">
                      <code>{workingCode}</code>
                    </pre>
                  </ScrollArea>
                </Card>
              ) : (
                <Card className="p-12 text-center border-dashed">
                  <Code2 className="w-12 h-12 mx-auto mb-4 text-muted-foreground opacity-50" />
                  <p className="text-muted-foreground text-sm">No code generated yet</p>
                  <p className="text-xs text-muted-foreground mt-2">
                    Start chatting in the Chat tab to generate code
                  </p>
                </Card>
              )}
            </div>
          </ScrollArea>
        </TabsContent>

        {/* Preview Tab */}
        <TabsContent value="preview" className="flex-1 m-0 h-[calc(100vh-240px)]">
          <div className="h-full p-4">
          {workingCode && workingCode !== "<!-- Initializing workspace... -->" ? (
              <div className="h-full border rounded-lg overflow-hidden bg-white shadow-sm">
                <iframe
                  srcDoc={workingCode}
                  className="w-full h-full border-0"
                  title="Preview"
                  sandbox="allow-scripts allow-same-origin"
                />
              </div>
            ) : (
              <Card className="h-full flex items-center justify-center border-dashed">
                <div className="text-center space-y-3">
                  <div className="h-16 w-16 rounded-full bg-muted mx-auto flex items-center justify-center">
                    <Eye className="w-8 h-8 text-muted-foreground opacity-50" />
                  </div>
                  <div className="space-y-1">
                    <p className="text-sm font-medium">No preview available</p>
                    <p className="text-xs text-muted-foreground">
                      Generate code in the Chat tab to see a live preview
                    </p>
                  </div>
                </div>
              </Card>
            )}
          </div>
        </TabsContent>

        {/* History Tab */}
        <TabsContent value="history" className="flex-1 m-0 h-[calc(100vh-240px)]">
          <ScrollArea className="h-full">
            <div className="p-4 space-y-4">
              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <h3 className="text-base font-semibold">{t("version.history")}</h3>
                  <p className="text-xs text-muted-foreground">
                    {t("version.restore")}
                  </p>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={loadVersionHistory}
                  disabled={loadingHistory}
                >
                  <RotateCcw className={`w-4 h-4 mr-2 ${loadingHistory ? 'animate-spin' : ''}`} />
                  Refresh
                </Button>
              </div>

              <Separator />

              {versionHistory.length === 0 ? (
                <Card className="p-12 text-center border-dashed">
                  <div className="h-16 w-16 rounded-full bg-muted mx-auto mb-4 flex items-center justify-center">
                    <History className="w-8 h-8 text-muted-foreground opacity-50" />
                  </div>
                  <p className="text-sm font-medium mb-1">No version history yet</p>
                  <p className="text-xs text-muted-foreground">
                    Versions are created automatically when you generate code
                  </p>
                </Card>
              ) : (
                <div className="space-y-2">
                  {versionHistory.map((version, index) => (
                    <Card key={version.id} className="hover:bg-muted/50 transition-colors">
                      <div className="p-4">
                        <div className="flex items-start justify-between gap-4">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-2">
                              <Badge variant="outline" className="text-xs font-mono">
                                v{version.version_number}
                              </Badge>
                              <span className="text-xs text-muted-foreground">
                                {new Date(version.created_at).toLocaleDateString()} {new Date(version.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                              </span>
                            </div>
                            <p className="text-sm mb-2 truncate">
                              {version.changes_summary || `${t("version.update")} ${version.version_number}`}
                            </p>
                            <div className="flex items-center gap-3 text-xs text-muted-foreground">
                              <span>{(version.html_code.length / 1000).toFixed(1)}KB</span>
                              {version.quality_score && (
                                <>
                                  <span>‚Ä¢</span>
                                  <span className="flex items-center gap-1">
                                    <Sparkles className="w-3 h-3" />
                                    Quality: {version.quality_score}
                                  </span>
                                </>
                              )}
                            </div>
                          </div>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleRestoreVersion(version)}
                            className="flex-shrink-0"
                          >
                            <RotateCcw className="w-3.5 h-3.5 mr-1.5" />
                            Restore
                          </Button>
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
              )}
            </div>
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  );
};
